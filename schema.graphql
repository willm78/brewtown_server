enum SortBy {
    # Sort by a combination of freshness and score, using Reddit's algorithm
    HOT
    # Newest entries first
    NEW
    # Highest score entries first
    TOP
}

enum UseHop {
    boil
    dryHop
    mash
    firstWort
    aroma
}

enum TypeHop {
    bittering
    aroma
    both
}

enum FormHop {
    pellet
    plug
    leaf
}

enum TypeFermentable {
    grain
    sugar
    extract
    dryExtract
    adjunct
}

enum TypeYeast {
    ale
    lager
    wheat
    wine
    champagne
}

enum FormYeast {
    liquid
    dry
    slant
    culture
}

enum FlocculationYeast {
    low
    medium
    high
    veryHigh
}

enum TypeMisc {
    spice
    fining
    water
    agent
    herb
    flavor
    other
}

enum UseMisc {
    boil
    mash
    primary
    secondary
    bottling
}

enum TypeStyle {
    lager
    ale
    mead
    wheat
    mixed
    cider
}

enum TypeMashStep {
    infusion
    temperature
    decoction
}

enum TypeRecipe {
    extract
    partialMash
    allGrain
}

schema {
    query: Query
    mutation: Mutation
}

type Query {
    hops(
        # The sort order
        sortBy: SortBy!,
        # The number of items to skip, for pagination
        offset: Int,
        # The number of items to fetch at a time, starting from offset
        limit: Int): [Hop]

    fermentables(
        sortBy: SortBy!,
        offset: Int,
        limit: Int): [Fermentable]

    yeasts(
        sortBy: SortBy!,
        offset: Int,
        limit: Int): [Yeast]

    miscs(
        sortBy: SortBy!,
        offset: Int,
        limit: Int): [Misc]

    waters(
        sortBy: SortBy!,
        offset: Int,
        limit: Int): [Water]

    styles(
        sortBy: SortBy!,
        offset: Int,
        limit: Int): [Style]
    
    mashs(
        sortBy: SortBy!,
        offset: Int,
        limit: Int): [Mash]

    recipes(
        sortBy: SortBy!,
        offset: Int,
        limit: Int): [Recipe]

    equipments(
        sortBy: SortBy!,
        offset: Int,
        limit: Int): [Equipment]
}

type Hop {
    id: ID!
    name: String
    version: String
    alpha: String
    amount: Float
    use: UseHop
    time: Float
    notes: String
    type: TypeHop
    form: FormHop
    beta: Float
    hsi: Float
    origin: String
    substitutes: [Hop]
    humulene: Float
    caryophyllene: Float
    cohumulone: Float
    myrcene: Float
}

type Fermentable {
    id: ID!
    name: String
    version: String
    type: TypeFermentable
    amount: Float
    yield: Float
    color: Float
    addAfterBoil: Boolean
    origin: String
    supplier: String
    notes: String
    coarseFineDiff: Float
    moisture: Float
    diastaticPower: Float
    protein: Float
    maxInBatch: Float
    recommendMash: Boolean
    ibuGalPerLb: Float
}

type Yeast {
    id: ID!
    name: String
    version: String
    type: TypeYeast
    form: FormYeast
    amount: Float
    amountIsWeight: Boolean
    laboratory: String
    productId: String
    minTemperature: Float
    maxTemperature: Float
    flocculation: FlocculationYeast
    attenuation: Float
    notes: String
    bestFor: String
    timesCultured: Int
    maxReuse: Int
    addToSecondary: Boolean
}

type Misc {
    id: ID!
    name: String
    version: String
    type: TypeMisc
    use: UseMisc
    time: Float
    amount: Float
    amountIsWeight: Boolean
    useFor: String
    notes: String
}

type Water {
    id: ID!
    name: String
    version: String
    amount: Float
    calcium: Float
    bicarbonate: Float
    sulfate: Float
    chloride: Float
    sodium: Float
    magnesium: Float
    ph: Float
    notes: String
}

type Equipment {
    id: ID!
    name: String
    version: String
    boilSize: Float
    batchSize: Float
    tunVolume: Float
    tunWeight: Float
    tunSpecificHeat: Float
    topUpWater: Float
    trubChillerLoss: Float
    evapRate: Float
    boilTime: Float
    calcBoilVolume: Boolean
    lauterDeadspace: Float
    topUpKettle: Float
    hopUtilization: Float
    notes: String
}

type Style {
    id: ID!
    name: String
    category: String
    version: String
    categoryNumber: String
    styleLetter: String
    styleGuide: String
    type: TypeStyle
    ogMin: Float
    fgMin: Float
    fgMax: Float
    ibuMin: Float
    ibuMax: Float
    colorMin: Float
    colorMax: Float
    carbMin: Float
    carbMax: Float
    abvMin: Float
    abvMax: Float
    notes: String
    profile: String
    ingredients: String
    examples: [Recipe]
}

type MashStep {
    id: ID!
    name: String
    version: String
    type: TypeMashStep
    infuseAmount: Float
    stepTemp: Float
    stepTime: Float
    rampTime: Float
    endTemp: Float
}

type Mash {
    id: ID!
    name: String
    version: String
    grainTemp: Float
    mashSteps: [MashStep]
    notes: String
    tunTemp: Float
    spargeTemp: Float
    ph: Float
    tunWeight: Float
    tunSpecificHeat: Float
    equipAdjust: Boolean
}

type Recipe {
    id: ID!
    name: String
    version: String
    type: TypeRecipe
    style: [Style]
    equipment: [Equipment]
    brewer: String
    asstBrewer: String
    batchSize: Float
    boilSize: Float
    boilTime: Float
    efficiency: Float
    hops: [Hop]
    fermentables: [Fermentable]
    miscs: [Misc]
    yeasts: [Yeast]
    waters: [Water]
    mash: Mash
    notes: String
    tasteNotes: String
    tasteRating: Float
    og: Float
    fg: Float
    fermentationStages: Int
    primaryAge: Float
    primaryTemp: Float
    secondaryAge: Float
    secondaryTemp: Float
    tertiaryAge: Float
    tertiaryTemp: Float
    age: Float
    ageTemp: Float
    date: String
    carbonation: Float
    forcedCarbonation: Boolean
    primingSugarName: String
    carbonationTemp: Float
    primingSugarEquiv: Float
    kegPrimingFactor: Float
}